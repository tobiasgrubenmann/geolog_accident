# Q1: crossings near accidents (1 spatial relation)

# entity iterator
iterate_ids_random("accidents", 256, AccidentID), near(("accidents", AccidentID), ("traffic", TrafficID)), entity_type(crossing_features, ("traffic", TrafficID))

# entity
random_relation("accidents", 256, Accidents), near((Accidents, AccidentID), ("traffic", TrafficID)), entity_type(crossing_features, ("traffic", TrafficID))

# relation evaluation
random_relation("accidents", 256, Accidents), entity_type_relational(crossing_features, "traffic", Crossings), near_relational(Accidents, Crossings, AccidentsNearCrossing, ["Accident", "Crossing"])

# relation evaluation iterator
random_relation("accidents", 256, Accidents), entity_type_relational(crossing_features, "traffic", Crossings), near_relational(Accidents, Crossings, AccidentsNearCrossing, ["Accident", "Crossing"]), iterate_relational(AccidentsNearCrossing, [Accident, Crossing])

# Q2: traffic features on the same street

# entity iterator
iterate_ids_random("accidents", 256, AccidentID), closeby(("accidents", AccidentID), ("roads", RoadID)), closeby(("traffic", TrafficID), ("roads", RoadID))

# entity
random_relation("accidents", 256, Accidents), closeby((Accidents, AccidentID), ("roads", RoadID)), closeby(("traffic", TrafficID), ("roads", RoadID))

# relation evaluation
random_relation("accidents", 256, Accidents), closeby_relational(Accidents, "roads", AccidentsCloseToRoad, ["Accident", "Road"]), filter_by_relationship("roads", AccidentsCloseToRoad, "Road", RoadsFiltered), closeby_relational("traffic", RoadsFiltered, TrafficCloseToRoad, ["Traffic", "Road"]), join_relational(AccidentsCloseToRoad, TrafficCloseToRoad, AccidentSameRoadTraffic, "Road", "Road", [["rel1.Accident", "Accident"], ["rel1.Road", "Road"], ["rel2.Traffic", "Traffic"]])

# relation evaluation iterator
random_relation("accidents", 256, Accidents), closeby_relational(Accidents, "roads", AccidentsCloseToRoad, ["Accident", "Road"]), filter_by_relationship("roads", AccidentsCloseToRoad, "Road", RoadsFiltered), closeby_relational("traffic", RoadsFiltered, TrafficCloseToRoad, ["Traffic", "Road"]), join_relational(AccidentsCloseToRoad, TrafficCloseToRoad, AccidentSameRoadTraffic, "Road", "Road", [["rel1.Accident", "Accident"], ["rel1.Road", "Road"], ["rel2.Traffic", "Traffic"]]), iterate_relational(AccidentSameRoadTraffic, [Accident, Road, Traffic])

# Q3: Accident near pois near schools.

# entity iterator
iterate_ids_random("accidents", 256, AccidentID), near(("accidents", AccidentID), ("pois", Pois1)), near(("pois", Pois1), ("pois", Pois2)), entity_type(school_features, ("pois", Pois2))

# entity
random_relation("accidents", 256, Accidents), near((Accidents, AccidentID), ("pois", Pois1)), near(("pois", Pois1), ("pois", Pois2)), entity_type(school_features, ("pois", Pois2))

# relation
random_relation("accidents", 256, Accidents), near_relational(Accidents, "pois", AccidentPois, ["Accident", "Poi"]), filter_by_relationship("pois", AccidentPois, "poi", PoisFiltered), entity_type_relational(school_features, "pois", Schools), near_relational(PoisFiltered, Schools, PoisSchools, ["Poi", "School"]), join_relational(AccidentPois, PoisSchools, AccidentPoiSchool, "Poi", "Poi", [["rel1.Accident", "Accident"], ["rel1.Poi", "Poi"], ["rel2.School", "School"]])

# relation iterator
random_relation("accidents", 256, Accidents), near_relational(Accidents, "pois", AccidentPois, ["Accident", "Poi"]), filter_by_relationship("pois", AccidentPois, "poi", PoisFiltered), entity_type_relational(school_features, "pois", Schools), near_relational(PoisFiltered, Schools, PoisSchools, ["Poi", "School"]), join_relational(AccidentPois, PoisSchools, AccidentPoiSchool, "Poi", "Poi", [["rel1.Accident", "Accident"], ["rel1.Poi", "Poi"], ["rel2.School", "School"]]), iterate_relational(AccidentPoiSchool, [Accident, POI, School])

# Q4: Accident near crossing without traffic light closeby.

# entity iterator
iterate_ids_random("accidents", 256, AccidentID), near(("accidents", AccidentID), ("traffic", Traffic)), entity_type(crossing_features, ("traffic", Traffic)), \+((closeby(("traffic", Traffic), ("traffic", OtherTraffic)), entity_type(traffic_signal_features, ("traffic", OtherTraffic))))

# entity
random_relation("accidents", 256, Accidents), near((Accidents, AccidentID), ("traffic", Traffic)), entity_type(crossing_features, ("traffic", Traffic)), \+((closeby(("traffic", Traffic), ("traffic", OtherTraffic)), entity_type(traffic_signal_features, ("traffic", OtherTraffic))))

# table
random_relation("accidents", 256, Accidents), entity_type_relational(crossing_features, "traffic", Crossings), near_relational(Accidents, Crossings, AccidentsNearCrossing, ["Accident", "Crossing"]), filter_by_relationship("traffic", AccidentsNearCrossing, "Crossing", CrossingsFiltered), entity_type_relational(traffic_signal_features, "traffic", Signals), near_relational(CrossingsFiltered, Signals, CrossingsSignals, ["Crossing", "Signal"]), join_relational(AccidentsNearCrossing, CrossingsSignals, AccidentSignalsCrossing, "Crossing", "Crossing", [["rel1.Accident", "Accident"], ["rel1.Crossing", "Crossing"], ["rel2.Signal", "Signal"]]), project_id_relational(AccidentSignalsCrossing, [["Accident", "Accident"]], AccidentWithSignalsNearCrossing), project_id_relational(AccidentsNearCrossing, [["Accident", "Accident"]], AccidentCrossingProj), minus_relational(AccidentCrossingProj, AccidentWithSignalsNearCrossing, Result)

# table iterator
random_relation("accidents", 256, Accidents), entity_type_relational(crossing_features, "traffic", Crossings), near_relational(Accidents, Crossings, AccidentsNearCrossing, ["Accident", "Crossing"]), filter_by_relationship("traffic", AccidentsNearCrossing, "Crossing", CrossingsFiltered), entity_type_relational(traffic_signal_features, "traffic", Signals), near_relational(CrossingsFiltered, Signals, CrossingsSignals, ["Crossing", "Signal"]), join_relational(AccidentsNearCrossing, CrossingsSignals, AccidentSignalsCrossing, "Crossing", "Crossing", [["rel1.Accident", "Accident"], ["rel1.Crossing", "Crossing"], ["rel2.Signal", "Signal"]]), project_id_relational(AccidentSignalsCrossing, [["Accident", "Accident"]], AccidentWithSignalsNearCrossing), project_id_relational(AccidentsNearCrossing, [["Accident", "Accident"]], AccidentCrossingProj), minus_relational(AccidentCrossingProj, AccidentWithSignalsNearCrossing, Result), iterate_relational(Result, [Accident])

# illustration
entity_type_relational(crossing_features, "traffic", Crossings), near_relational("accidents", Crossings, AccidentsNearCrossing, ["Accident", "Crossing"]), filter_by_relationship("traffic", AccidentsNearCrossing, "Crossing", CrossingsFiltered), entity_type_relational(traffic_signal_features, "traffic", Signals), near_relational(CrossingsFiltered, Signals, CrossingsSignals, ["Crossing", "Signal"]), join_relational(AccidentsNearCrossing, CrossingsSignals, AccidentSignalsCrossing, "Crossing", "Crossing", [["rel1.Accident", "Accident"], ["rel1.Crossing", "Crossing"], ["rel2.Signal", "Signal"]]), project_id_relational(AccidentSignalsCrossing, [["Accident", "Accident"]], AccidentWithSignalsNearCrossing), project_id_relational(AccidentsNearCrossing, [["Accident", "Accident"]], AccidentCrossingProj), minus_relational(AccidentCrossingProj, AccidentWithSignalsNearCrossing, Result), filter_by_relationship("accidents", Result, "Accident", ResultAccidents), new_in_memory_fc_name(AccidentsFCName), materialize(ResultAccidents, AccidentsFCName), add_layer(AccidentsFCName, "query_output_accidents"), new_in_memory_fc_name(BufferFCName), arcpy_core:arcpy_Buffer_analysis([AccidentsFCName, BufferFCName, "100 meters"]), add_layer(BufferFCName, "query_output_buffer"), new_in_memory_fc_name(CrossingsFCName), materialize(CrossingsFiltered, CrossingsFCName), add_layer(CrossingsFCName, "query_output_crossings"), new_in_memory_fc_name(TrafficlightsFCName), materialize(Signals, TrafficlightsFCName), add_layer(TrafficlightsFCName, "query_output_trafficlights")

# illustration selection
entity_type_relational(crossing_features, "traffic", Crossings), near_relational("accidents", Crossings, AccidentsNearCrossing, ["Accident", "Crossing"]), filter_by_relationship("traffic", AccidentsNearCrossing, "Crossing", CrossingsFiltered), entity_type_relational(traffic_signal_features, "traffic", Signals), near_relational(CrossingsFiltered, Signals, CrossingsSignals, ["Crossing", "Signal"]), join_relational(AccidentsNearCrossing, CrossingsSignals, AccidentSignalsCrossing, "Crossing", "Crossing", [["rel1.Accident", "Accident"], ["rel1.Crossing", "Crossing"], ["rel2.Signal", "Signal"]]), project_id_relational(AccidentSignalsCrossing, [["Accident", "Accident"]], AccidentWithSignalsNearCrossing), project_id_relational(AccidentsNearCrossing, [["Accident", "Accident"]], AccidentCrossingProj), minus_relational(AccidentCrossingProj, AccidentWithSignalsNearCrossing, Result), iterate_relational(Result, [Accident]), atomics_to_string(["accident_id = ", Accident], Clause), arcpy_core:arcpy_SelectLayerByAttribute_management(["geolog.geolog.accidents", "ADD_TO_SELECTION", Clause])